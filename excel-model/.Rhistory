library(readxl)
results = readxl::read_xlsx("aggregated-results.xlsx", sheet = "Results")
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
?randomForest
View(results)
forest = randomForest::randomForest(results, 'GDP pc final' ~ .)
forest = randomForest::randomForest(results, results$`GDP pc final` < 1000 ~ .)
results$model_fails = results$`GDP pc final` < 100
forest = randomForest::randomForest(results,  model_fails ~ .)
forest = randomForest::randomForest(model_fails ~ ., data = results)
View(results)
results$model_fails
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = results)
forest = randomForest::randomForest(model_fails ~ ., data = results, importance = T)
library(dplyr)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
results$
mean(results$model_fails)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
mean(results$model_fails)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(-`Plan Components`,-`Policy Orientation`)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(-`Plan Components`,-`Policy Orientation`, -`Adaptive Policy: Debt Forecast-informed Fiscal Policy`)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(-`Plan Components`,-`Policy Orientation`, -`Adaptive Policy: Debt Forecast-informed Fiscal Policy`)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
plot(tree)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
plot(tree)
text(tree)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(-`Plan Components`,
-`Policy Orientation`,
-`Adaptive Policy: Debt Forecast-informed Fiscal Policy`, -`GDP pc final`, -`GDP final($T)`, -`GDP NPV ($T)`)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
plot(tree)
text(tree)
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(-`Plan Components`,
-`Policy Orientation`,
-`Adaptive Policy: Debt Forecast-informed Fiscal Policy`,
-`GDP pc final`, -`GDP final($T)`, -`GDP NPV ($T)`, -`Interest NPV ($T)`)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
plot(tree)
text(tree)
inputs =
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(2:31)
View(treated_results)
inputs =
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(2:31)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
inputs =
treated_results = results %>%
mutate(model_fails = results$`GDP pc final` < 100) %>%
select(2:31, model_fails)
View(treated_results)
mean(results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
plot(tree)
text(tree)
install.packages("rpart.plot")
library(rpart.plot)
library(rpart.plot)
rpart.plot(tree)
treated_results = results %>%
mutate(model_fails = ifelse(results$`GDP pc final` < 1000, "GDP Plummets", "GDP is Fine")) %>%
select(2:31, model_fails)
mean(results$model_fails)
mean(treated_results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
rpart.plot(tree)
treated_results = results %>%
mutate(model_fails = ifelse(results$`GDP pc final` > 10000, "GDP pc > 10k", "GDP pc < 10K")) %>%
select(2:31, model_fails)
mean(treated_results$model_fails)
forest = randomForest::randomForest(model_fails ~ ., data = treated_results, importance = T)
tree = rpart::rpart(model_fails ~ ., data = treated_results,method = "class")
rpart.plot(tree)
rpart.plot(tree, box.palette = c("red", "blue"))
rpart.plot(tree, box.palette = c("red3", "blue3"))
rpart.plot(tree, box.palette = c("red1", "blue1"))
rpart.plot(tree, box.palette = c("red10", "blue10"))
rpart.plot(tree)
